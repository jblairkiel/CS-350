import java.awt.Color;
import java.awt.Image;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.*;
import java.util.*;

public class BuildingPanel extends JPanel
	implements MouseListener, MouseMotionListener{
		
	//state representations
	private ArrayList<BuildingBlock> originals;
	private ArrayList<BuildingBlock> duplicates;
	
	private BuildingBlock BlockToBeMoved;
	private int m_nOffsetX;
	private int m_nOffsetY;
	
	//double buffering
	private Image backBuffer;
	private Graphics gBackBuffer;
	
	private int currentOriginal;
	private int currentDuplicate;
	
	boolean isInitialized;
	
	//init and register mouse event handler
	public BuildingPanel()
	{
		isInitialized=false;
		//handle mouse and mouse motion events
		this.addMouseListener(this);
		this.addMouseMotionListener(this);
	}

	void init()
	{
		//Initial state
		duplicates = new ArrayList<BuildingBlock>();
		originals = new ArrayList<BuildingBlock>();
		Color[] colors = {Color.red, Color.green, Color.blue, Color.magenta, Color.cyan, Color.yellow};
		int count=colors.length;
		int dx=10;
		int dy=10;
		int gap=20;
		int length=(getSize().width-2*dx-(count-1)*gap)/count;
		for (int i = 0; i<count; i++){
			originals.add(new BuildingBlock((i<count/2)?0:1, dx+i*(length+gap), dy, length, length, colors[i]));
		}
		BlockToBeMoved=null;//no shape
		
		// create the back buff
		backBuffer = createImage(getSize().width, getSize().height);
		gBackBuffer = backBuffer.getGraphics();
	}
	

	//State Presentation
	public void paintComponent(Graphics g)
	{
		if (!isInitialized) {
			isInitialized=true;
			init();
		}
		//State presentation using double buffer
		//First, clear the back buffer
		gBackBuffer.setColor(Color.white);
		gBackBuffer.clearRect(0, 0, getSize().width, getSize().height);
		
		//draw the originals to back buffers
		for (int i=0; i<originals.size(); i++) {
			originals.get(i).draw(gBackBuffer);
		}
		// draw the duplicates to back buffer
		for (int i=0; i<duplicates.size(); i++) {
			duplicates.get(i).draw(gBackBuffer);
		}
		
		g.drawImage(backBuffer, 0, 0, null);
	}

	public void mouseClicked(MouseEvent e)
	{
		boolean isHit = false;
		if (e.isMetaDown()) {
			for (int i=duplicates.size()-1; i>=0;i--){
				isHit = hitTest(e.getX(), e.getY());
				if (isHit == true){
				duplicates.remove(i);
				repaint();
				break;
				}
			}
		}
	}
		
	public void mousePressed( MouseEvent e )
    {
    	if (e.isMetaDown()) return;	// ignore right button
        
		// First, check the originals, from top down (i.e. back to front)
		for (int i=duplicates.size()-1; i>=0; i--) {
			currentDuplicate = i;
			BuildingBlock p=duplicates.get(i);
			boolean test = hitTest(e.getX(), e.getY());
			if (test) {
				duplicates.remove(i);
				duplicates.add(p);	// move to the end, i.e. the top
				BlockToBeMoved=p;
				m_nOffsetX=e.getX()-BlockToBeMoved.getX();
				m_nOffsetY=e.getY()-BlockToBeMoved.getY();
				repaint();
				return;
			}
		}
		// Second, check the orignals 
		for (int i=originals.size()-1; i>=0; i--) {
			currentOriginal = i;
			BuildingBlock p=originals.get(i);
			boolean test = hitTest(e.getX(), e.getY());
			if (test) {
				BuildingBlock p2=new BuildingBlock(p); // make a copy of p
				duplicates.add(p2);	// add to the end
				BlockToBeMoved=p2;	// p2 is selected, to be moved
				m_nOffsetX=e.getX()-BlockToBeMoved.getX();
				m_nOffsetY=e.getY()-BlockToBeMoved.getY();
				repaint();
				return;
			}
		}
    }	
	
	public boolean hitTest(int x, int y){
		System.out.println(currentDuplicate);
		BuildingBlock p=duplicates.get(currentDuplicate);
		if (p.containPoint(x,y)) {	
			return true;
		}
		BuildingBlock p2=originals.get(currentOriginal);
		if (p2.containPoint(x,y)) {
			return true;
		}
		return false;
	};
	
	public void mouseReleased( MouseEvent e )
    {
		BlockToBeMoved=null; // no shape selected
   }

    public void mouseEntered( MouseEvent e )
    {
    }

    public void mouseExited( MouseEvent e )
    {
    }

    public void mouseMoved( MouseEvent e )
    {
    }
    
    public void mouseDragged( MouseEvent e )
    {
        if (e.isMetaDown()) return;	// ignore right button
    	
		if (BlockToBeMoved!=null) {
			BlockToBeMoved.setX(e.getX()-m_nOffsetX);
			BlockToBeMoved.setY(e.getY()-m_nOffsetY);
			repaint();
		}

    } // end method mouseDragged
} // end class BuildingBlockPanel

